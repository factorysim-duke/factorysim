/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.duke.ece651.factorysim;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

import java.io.*;

class AppTest {

    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main()throws IOException{
        ByteArrayOutputStream bytes=new ByteArrayOutputStream();
        PrintStream out=new PrintStream(bytes,true);

        InputStream input = getClass().getClassLoader().getResourceAsStream("inputs/input1.txt");
        assertNotNull(input);

        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("outputs/output1.txt");
        assertNotNull(expectedStream);
        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            String filePath = "src/test/resources/inputs/doors1.json";
            String[] args = {filePath};
            App.main(args);
//            App.actualMain(filePath, new BufferedReader(new InputStreamReader(System.in)));
        }
        finally {
            //replace back
            System.setIn(oldIn);
            System.setOut(oldOut);
        }
        //output.txt as expected
        String expected = new String(expectedStream.readAllBytes()).replace("\r\n", "\n");

        //actual output
        String actual = bytes.toString().replace("\r\n", "\n");
        assertEquals(expected, actual);
        expectedStream.close();
        input.close();

    }

}
